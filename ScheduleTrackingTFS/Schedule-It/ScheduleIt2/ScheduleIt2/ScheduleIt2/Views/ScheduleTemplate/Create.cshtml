@model ScheduleIt2.Models.ScheduleTemplate

@{
    ViewBag.Title = "Create";
}

<h2>Create Schedule Templates</h2>

@*Calendar*@
<div id="calendarScheduleTemplate" class="mt-40"></div>

@* Modal for when the user clicks on a date to be able to enter information *@
@*<div id="ScheduleTemplateModal" class="modal">
    <div class="modal-content">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h3 class="text-center">Create A Schedule Template</h3>
            <hr />
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })


            <div class="form-group">
                <label for="StartTime" class="col-md-4 text-right">Start Time</label>
                <div class="col-md-8">
                    <input type="date" name="StartTime"/>
                </div>
            </div>
            <div class="form-group">
                <label for="EndTime" class="col-md-4 text-right">End Time</label>
                <div class="col-md-8">
                    <input type="date" name="EndTime"/>
                </div>
            </div>
            <div class="form-group">
                <label for="TimeOff" class="col-md-4 text-right">Time Off</label>
                <div class="col-md-8">
                    <input type="checkbox" name="TimeOff" />
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-4 col-md-8">
                    <input type="submit" value="Create" class="btn btn-default" />
                    <div class="btn btn-default closeModal">Close</div>
                </div>
            </div>
            </div>
        }
    </div>
</div>*@


<div id="DetailsModal" class="modal fade" role="dialog" style="overflow:scroll">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title "><strong><span class="eventTitle"></span></strong></h4>
            </div>
            <div class="modal-body">
                <p id="pDetails"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger pull-left EventDelete" data-dismiss="modal">
                    <span class="glyphicon glyphicon-trash"></span> Remove
                </button>
                <button type="button" class="btn btn-primary" id="EventEdit" data-dismiss="modal">
                    <span class="glyphicon glyphicon-pencil"></span> Edit
                </button>
                <button type="button" class="btn btn-default pull-right" data-dismiss="modal">
                    <span class="glyphicon glyphicon-remove"></span> Close
                </button>
            </div>
        </div>
    </div>
</div>


<div id="SaveModal" class="modal fade" role="dialog" style="overflow:scroll">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"><strong><span class="eventTitle">Edit Event</span></strong></h4>
            </div>
            <div class="modal-body">
                <form class="form-horizontal">
                    <input type="hidden" id="inputEventID" value="0" />
                    <div class="form-group">
                        <label class="control-label col-sm-2" for="inputTitle">Title:</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" id="inputTitle" placeholder="Enter your text here" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-2" for="inputNote">Note:</label>
                        <div class="col-sm-10">
                            <textarea class="form-control" id="inputNote" rows="6" placeholder="Enter your text here"></textarea>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-2" for="inputColor">Color:</label>
                        <div class="col-sm-3">
                            <input type="color" class="form-control" id="inputColor" value="#3a87ad">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-2" for="inputStart">Start:</label>
                        <div class="col-sm-10">
                            <input type="datetime-local" class="form-control" id="inputStart" step="900" onkeydown="return false"> @*value="2019-01-12T21:20"*@
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-offset-2 col-sm-10">
                            <div class="checkbox">
                                <label><input type="checkbox" id="inputFullDay"> Full Day Event</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group" id="divEnd">
                        <label class="control-label col-sm-2" for="inputEnd">End:</label>
                        <div class="col-sm-10">
                            <input type="datetime-local" class="form-control" id="inputEnd"  step="900" onkeydown="return false">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger pull-left EventDelete" data-dismiss="modal">
                    <span class="glyphicon glyphicon-trash"></span> Remove
                </button>
                <button type="button" class="btn btn-success" id="EventSave" data-dismiss="modal">
                    <span class="glyphicon glyphicon-floppy-save"></span> Save
                </button>
                <button type="button" class="btn btn-default pull-right" data-dismiss="modal">
                    <span class="glyphicon glyphicon-remove"></span> Close
                </button>
            </div>
        </div>
    </div>
</div>




    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

        <script>
            $(document).ready(function () {

                var events = [];  //List of all events from database
                var selectedEvent = null;  //Current event being edited by the user
                var isNewSelection = false;  //True if user is making a brand new event, false if user is viewing an existing event
                var startCache;  //temporary storage of selectedEvent start time
                var endCache;  //temporary storage of selectedEvent end time
                var wantToSave = false;  //True if current selectedEvent should be saved to database

                //Call function to display events calendar
                DisplayEvents();  

                //Retrieve events from database and call GenerateCalendar()
                function DisplayEvents() {
                    events = []; //Reset events list so that it only holds updated events from database
                    //$('#calendarScheduleTemplate').html('');

                    //Make database call to retrieve events
                    $.ajax({
                        type: "GET",
                        url: "/ScheduleTemplate/GetEvents",
                        success: function (data) {
                            $.each(data, function (i, c) {
                                //alert(c.Note);
                                events.push({
                                    id: c.EventID,
                                    eventID: c.EventID,
                                    title: c.Title,
                                    description: c.Note,
                                    start: moment(c.Start),
                                    end: c.End != null ? moment(c.End) : null,
                                    //color: c.Color;
                                    allDay: false //c.IsFullDay;
                                });
                            })
                            GenerateCalendar(events);  //Pass events list to generate calendar

                        },
                        error: function (error) {
                            alert("There was an error retrieving your calendar.  Please try again or contact your system admin.");
                        }

                    })
                }

                //Generate FullCalendar and populate with input of database events
                function GenerateCalendar(events) {
                    $('#calendarScheduleTemplate').fullCalendar('destroy');  //Remove old calendar 
                    $('#calendarScheduleTemplate').fullCalendar({
                        header: {
                            center: 'agendaDay,agendaWeek,month'
                        },
                        defaultView: 'agendaWeek',
                        selectable: true,
                        unselectAuto: false,
                        selectHelper: true,
                        editable: true,
                        eventLimit: true,
                        contentHeight: 600,
                        //defaultDate: new Date(),
                        timeFormat: 'h(:mm)a',
                        eventLimit: true,
                        //eventColor: '#378006',
                        events: events,
                        eventDurationEditable: false, //Do not allow resizing event
                        eventStartEditable: false, //Do not allow drag and drop of event
                        eventClick: function (calEvent, jsEvent, view) {
                            //for (var key in calEvent) {
                            //    alert('key: ' + key + '\n' + 'value: ' + calEvent[key]);
                            //}
                            isNewSelection = false;
                            selectedEvent = calEvent;
                            startCache = selectedEvent.start;  //chache the start time
                            endCache = selectedEvent.end;  //cache the end time
                            $('.eventTitle').text(calEvent.title);
                            var $description = $('<div/>');
                            $description.append($('<p/>').html('<b>Start: <b>' + calEvent.start.format("MM-DD-YYYY hh:mm a")));
                            if (calEvent.end != null) {
                                $description.append($('<p/>').html('<b>End: <b>' + calEvent.end.format("MM-DD-YYYY hh:mm a")));
                            }
                            $description.append($('<p/>').html('<b>Description: <b>' + calEvent.description));
                            $('#DetailsModal #pDetails').empty().html($description);
                            $('#DetailsModal').modal();
                        },
                        select: function (start, end) {
                            isNewSelection = true;
                            selectedEvent = {
                                id: 0,
                                eventID: 0,
                                start: start,
                                end: end,
                                title: '',
                                description: '',
                                allDay: false,
                                color: '#3a87ad'
                            }
                            $('#SaveModal').modal();
                            $('#SaveModal .eventTitle').text('Create Event');
                            $('#inputTitle').val('');
                            $('#inputNote').val('');
                            var formatDate = new Date(start);
                            //alert('Start is: ' + formatDate.toISOString().substring(0, 19));
                            $('#inputStart').val(formatDate.toISOString().substring(0, 19));
                            formatDate = new Date(end);
                            //alert('End is: ' + formatDate.toISOString().substring(0, 19));
                            $('#inputEnd').val(formatDate.toISOString().substring(0, 19));
                        }
                        //        select: function (start, end) {
                        //            $.getScript('/events/new)', function () {
                        //                $('#event_date_range').val(moment(start).format("MM/DD/YYYY HH:mm") + ' - ' + moment(end).format("MM/DD/YYYY HH:mm"));
                        //                date_range_picker();
                        //                $('.start_hidden').val(moment(start).format("MM/DD/YYYY HH:mm"));
                        //                $('.end_hidden').val(moment(end).format("MM/DD/YYYY HH:mm"));
                        //            });
                        //        }
                    })
                    //alert(events[0].title);
                }

                //Delete current event
                $('.EventDelete').click(function () {
                    ///alert(selectedEvent._id);
                    if (selectedEvent != null && confirm('Are you sure you wish to delete this event?')) {
                        $.ajax({
                            type: 'POST',
                            url: '/ScheduleTemplate/DeleteEvent',
                            data: {'EventID': selectedEvent.eventID },
                            success: function (data) {
                                if (data.status) {
                                    //Hide modal and refresh calendar
                                    $('#DetailsModal').modal('hide');
                                    $('#SaveModal').modal('hide');
                                    //alert('Delete Event. id: ' + selectedEvent.id + ' eventID: ' + selectedEvent.eventID);
                                    $('#calendarScheduleTemplate').fullCalendar('removeEvents',selectedEvent.id);
                                    //DisplayEvents();
                                }
                            },
                            error: function () {
                                alert('This event failed to delete.  Please try again or contact your system admin.');
                            }
                        })
                    }

                })


                //When user clicks 'Save' set selectedEvent values to editor input values from user
                $('#EventSave').click(function () {
                    //$.guid = 0;
                    var tempEventID = selectedEvent.eventID;
                    if (isNewSelection) {
                        //alert('Create Event ID = 0');
                        selectedEvent.eventID = 0;
                    }

                    selectedEvent.title = $('#inputTitle').val();
                    selectedEvent.note = $('#inputNote').val();
                    //selectedEvent.start = $('#inputStart').val();
                    //selectedEvent.end = $('#inputEnd').val();

                    //Create object that exactly matches database column properties
                    var savedEventData = {
                        EventID: tempEventID,
                        Title: $('#inputTitle').val(),
                        Note: $('#inputNote').val(),
                        Start: $('#inputStart').val(),
                        End: $('#inputEnd').val()
                    }

                    wantToSave = true;  //selected event is now ready to be saved to database
                    SaveEvent(savedEventData);  //updated database
                })


                //Make database call to update current event
                function SaveEvent(data) {
                    $.ajax({
                        type: 'POST',
                        url: '/ScheduleTemplate/SaveEvent',
                        data: data,
                        success: function (data) {
                            if (data.status) {
                                //Hide modal and refresh calendar
                                $('#SaveModal').modal('hide');
                                if (isNewSelection) {
                                    //alert('Add Event. id: ' + selectedEvent.id + ' eventID: ' + selectedEvent.eventID);
                                    DisplayEvents();
                                }
                                else {
                                    $('#calendarScheduleTemplate').fullCalendar('updateEvent', selectedEvent); //Can be used, however due to mysterious 8 hour offset, this can currently produce errors.
                                    //DisplayEvents();
                                }
                                
                            }
                        },
                        error: function () {
                            alert('This event failed to save.  Please try again or contact your system admin.');
                        }
                    })
                }

                $('#EventEdit').click(function () {
                    $('#DetailsModal').modal('hide');
                    openSaveModal();
                })

                //Update event visually each time the end time input is adjusted by user
                $('#inputStart').on('input', function () {
                    //If brand new selection, then update onscreen selection,
                    //else adjust existing onscreen event with no database calls
                    if (isNewSelection) {
                        selectedEvent.start = $('#inputStart').val();
                        $('#calendarScheduleTemplate').fullCalendar('select', selectedEvent.start, selectedEvent.end)
                    }
                    else {
                        selectedEvent.start = $('#inputStart').val();
                        $('#calendarScheduleTemplate').fullCalendar('updateEvent', selectedEvent)
                    }
                    
                })

                //Update event visually each time the start time input is adjusted by user
                $('#inputEnd').on('input', function () {
                    //If brand new selection, then update onscreen selection,
                    //else adjust existing onscreen event with no database calls
                    if (isNewSelection) {
                        selectedEvent.end = $('#inputEnd').val();
                        //alert('#inputEnd: ' + $('#inputEnd').val() + '\nselectedEvent.end: ' + selectedEvent.end);
                        $('#calendarScheduleTemplate').fullCalendar('select', selectedEvent.start, selectedEvent.end)
                    }
                    else {
                        selectedEvent.end = $('#inputEnd').val();
                        $('#calendarScheduleTemplate').fullCalendar('updateEvent', selectedEvent)
                    }
                })

                //Changes for when user clicks on Is Full Day check box
                $('#inputFullDay').change(function () {
                    var formatDate = new Date(selectedEvent.start);
                    var tzOffsetHours = (new Date()).getTimezoneOffset() / 60;  //Convert from minutes to hours
                    if (!isNewSelection) {
                        formatDate.setHours(formatDate.getHours() - tzOffsetHours);
                    }
                    if ($(this).is(':checked')) {
                        $('#divEnd').hide();
                        $('#inputStart').attr("type", "date");
                        $('#inputStart').val(formatDate.toISOString().substring(0, 10));  //or $('#inputStart').val(selectedEvent.start.format("YYYY-MM-DD"));
                    }
                    else {
                        $('#divEnd').show()
                        $('#inputStart').attr("type", "datetime-local");
                        $('#inputStart').val(formatDate.toISOString().substring(0, 19));
                    }
                        
                })

                //Prepare the input values for the SaveModal and then make it visible
                function openSaveModal() {
                    //alert('selected start: ' + selectedEvent.start.format("MM-DD-YYYY hh:mm a") + '\nselected start ISO: ' + selectedEvent.start.toISOString() + '\nselected end: ' + selectedEvent.end.format("MM-DD-YYYY hh:mm a") + '\nselected end ISO: '  + selectedEvent.end.toISOString() );
                    if (selectedEvent != null) {
                        $('#inputEventID').val(selectedEvent.eventID);
                        $('#inputTitle').val(selectedEvent.title);
                        $('#inputNote').val(selectedEvent.description);
                        //$('#inputColor').val(selectedEvent.color);
                        $('#inputStart').val( getLocalISOTime(selectedEvent.start, 19) );
                        $('#inputEnd').val(selectedEvent.end != null ? getLocalISOTime(selectedEvent.end, 19) : 0);
                        $('#inputFullDay').prop("checked", selectedEvent.allDay || false); //If selectedEvent.allDay is null then use false instead
                        $('#inputFullDay').change();

                    }
                    $('#SaveModal').modal();
                }

                //Each time the SaveModel is exited, reset any changes
                $('#SaveModal').on("hidden.bs.modal", function () {
                    //If attempting new selection, unselect
                    //else if editing existing event without saving, undo user changes by restoring cache for start and end times
                    //
                    if (isNewSelection) {
                        $('#calendarScheduleTemplate').fullCalendar('unselect');
                    }
                    else {
                        if (!wantToSave) {
                            selectedEvent.start = startCache;
                            selectedEvent.end = endCache;
                            $('#calendarScheduleTemplate').fullCalendar('updateEvent', selectedEvent)
                        }
                        wantToSave = false; //reset wantToSave to false
                        //DisplayEvents();
                    }
                    
                });


                function getLocalISOTime(date, stringLength) {
                    var tzoffset = (new Date()).getTimezoneOffset() * 60000; //Convert from minutes to milliseconds
                    var LocalISOTime = (new Date(Date.parse(date) - tzoffset)).toISOString().substring(0, stringLength);
                    return LocalISOTime;
                }

            })
        </script>
    }

